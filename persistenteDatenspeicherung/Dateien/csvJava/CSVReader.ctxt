#BlueJ class context
comment0.params=reader
comment0.target=CSVReader(Reader)
comment0.text=\nConstructs\ CSVReader\ using\ a\ comma\ for\ the\ separator.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n\n
comment1.params=reader\ separator
comment1.target=CSVReader(Reader,\ char)
comment1.text=\nConstructs\ CSVReader\ with\ supplied\ separator.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries.\n\n
comment10.target=String[]\ readNext()
comment10.text=\nReads\ the\ next\ line\ from\ the\ buffer\ and\ converts\ to\ a\ string\ array.\n\n@return\ a\ string\ array\ with\ each\ comma-separated\ element\ as\ a\ separate\nentry.\n\n@throws\ IOException\nif\ bad\ things\ happen\ during\ the\ read\n\n
comment11.target=String\ getNextLine()
comment11.text=\nReads\ the\ next\ line\ from\ the\ file.\n\n@return\ the\ next\ line\ from\ the\ file\ without\ trailing\ newline\n@throws\ IOException\nif\ bad\ things\ happen\ during\ the\ read\n\n
comment12.target=void\ close()
comment12.text=\nCloses\ the\ underlying\ reader.\n\n@throws\ IOException\ if\ the\ close\ fails\n\n
comment2.params=reader\ separator\ quotechar
comment2.target=CSVReader(Reader,\ char,\ char)
comment2.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n\n
comment3.params=reader\ separator\ quotechar\ strictQuotes
comment3.target=CSVReader(Reader,\ char,\ char,\ boolean)
comment3.text=\nConstructs\ CSVReader\ with\ supplied\ separator,\ quote\ char\ and\ quote\ handling\nbehavior.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ strictQuotes\nsets\ if\ characters\ outside\ the\ quotes\ are\ ignored\n\n
comment4.params=reader\ separator\ quotechar\ escape
comment4.target=CSVReader(Reader,\ char,\ char,\ char)
comment4.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n\n
comment5.params=reader\ separator\ quotechar\ line
comment5.target=CSVReader(Reader,\ char,\ char,\ int)
comment5.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ line\nthe\ line\ number\ to\ skip\ for\ start\ reading\ \n\n
comment6.params=reader\ separator\ quotechar\ escape\ line
comment6.target=CSVReader(Reader,\ char,\ char,\ char,\ int)
comment6.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n@param\ line\nthe\ line\ number\ to\ skip\ for\ start\ reading\n\n
comment7.params=reader\ separator\ quotechar\ escape\ line\ strictQuotes
comment7.target=CSVReader(Reader,\ char,\ char,\ char,\ int,\ boolean)
comment7.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n@param\ line\nthe\ line\ number\ to\ skip\ for\ start\ reading\n@param\ strictQuotes\nsets\ if\ characters\ outside\ the\ quotes\ are\ ignored\n\n
comment8.params=reader\ separator\ quotechar\ escape\ line\ strictQuotes\ ignoreLeadingWhiteSpace
comment8.target=CSVReader(Reader,\ char,\ char,\ char,\ int,\ boolean,\ boolean)
comment8.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ reader\nthe\ reader\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n@param\ line\nthe\ line\ number\ to\ skip\ for\ start\ reading\n@param\ strictQuotes\nsets\ if\ characters\ outside\ the\ quotes\ are\ ignored\n@param\ ignoreLeadingWhiteSpace\nit\ true,\ parser\ should\ ignore\ white\ space\ before\ a\ quote\ in\ a\ field\n\n
comment9.target=List<String[]>\ readAll()
comment9.text=\nReads\ the\ entire\ file\ into\ a\ List\ with\ each\ element\ being\ a\ String[]\ of\ntokens.\n\n@return\ a\ List\ of\ String[],\ with\ each\ String[]\ representing\ a\ line\ of\ the\nfile.\n\n@throws\ IOException\nif\ bad\ things\ happen\ during\ the\ read\n\n
numComments=13

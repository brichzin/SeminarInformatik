#BlueJ class context
comment0.params=writer
comment0.target=CSVWriter(Writer)
comment0.text=\nConstructs\ CSVWriter\ using\ a\ comma\ for\ the\ separator.\n\n@param\ writer\nthe\ writer\ to\ an\ underlying\ CSV\ source.\n\n
comment1.params=writer\ separator
comment1.target=CSVWriter(Writer,\ char)
comment1.text=\nConstructs\ CSVWriter\ with\ supplied\ separator.\n\n@param\ writer\nthe\ writer\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries.\n\n
comment10.params=line
comment10.target=boolean\ stringContainsSpecialCharacters(String)
comment11.params=nextElement
comment11.target=StringBuilder\ processLine(String)
comment12.target=void\ flush()
comment12.text=\nFlush\ underlying\ stream\ to\ writer.\n\n@throws\ IOException\ if\ bad\ things\ happen\n\n
comment13.target=void\ close()
comment13.text=\nClose\ the\ underlying\ stream\ writer\ flushing\ any\ buffered\ content.\n\n@throws\ IOException\ if\ bad\ things\ happen\n\n\n
comment14.target=boolean\ checkError()
comment14.text=\nChecks\ to\ see\ if\ the\ there\ has\ been\ an\ error\ in\ the\ printstream.\ \n\n
comment15.params=resultService
comment15.target=void\ setResultService(ResultSetHelper)
comment2.params=writer\ separator\ quotechar
comment2.target=CSVWriter(Writer,\ char,\ char)
comment2.text=\nConstructs\ CSVWriter\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ writer\nthe\ writer\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n\n
comment3.params=writer\ separator\ quotechar\ escapechar
comment3.target=CSVWriter(Writer,\ char,\ char,\ char)
comment3.text=\nConstructs\ CSVWriter\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ writer\nthe\ writer\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escapechar\nthe\ character\ to\ use\ for\ escaping\ quotechars\ or\ escapechars\n\n
comment4.params=writer\ separator\ quotechar\ lineEnd
comment4.target=CSVWriter(Writer,\ char,\ char,\ String)
comment4.text=\nConstructs\ CSVWriter\ with\ supplied\ separator\ and\ quote\ char.\n\n@param\ writer\nthe\ writer\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ lineEnd\nthe\ line\ feed\ terminator\ to\ use\n\n
comment5.params=writer\ separator\ quotechar\ escapechar\ lineEnd
comment5.target=CSVWriter(Writer,\ char,\ char,\ char,\ String)
comment5.text=\nConstructs\ CSVWriter\ with\ supplied\ separator,\ quote\ char,\ escape\ char\ and\ line\ ending.\n\n@param\ writer\nthe\ writer\ to\ an\ underlying\ CSV\ source.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escapechar\nthe\ character\ to\ use\ for\ escaping\ quotechars\ or\ escapechars\n@param\ lineEnd\nthe\ line\ feed\ terminator\ to\ use\n\n
comment6.params=allLines
comment6.target=void\ writeAll(List<String[]>)
comment6.text=\nWrites\ the\ entire\ list\ to\ a\ CSV\ file.\ The\ list\ is\ assumed\ to\ be\ a\nString[]\n\n@param\ allLines\na\ List\ of\ String[],\ with\ each\ String[]\ representing\ a\ line\ of\nthe\ file.\n\n
comment7.params=rs
comment7.target=void\ writeColumnNames(ResultSet)
comment8.params=rs\ includeColumnNames
comment8.target=void\ writeAll(java.sql.ResultSet,\ boolean)
comment8.text=\nWrites\ the\ entire\ ResultSet\ to\ a\ CSV\ file.\n\nThe\ caller\ is\ responsible\ for\ closing\ the\ ResultSet.\n\n@param\ rs\ the\ recordset\ to\ write\n@param\ includeColumnNames\ true\ if\ you\ want\ column\ names\ in\ the\ output,\ false\ otherwise\n\n@throws\ java.io.IOException\ thrown\ by\ getColumnValue\n@throws\ java.sql.SQLException\ thrown\ by\ getColumnValue\n\n
comment9.params=nextLine
comment9.target=void\ writeNext(String[])
comment9.text=\nWrites\ the\ next\ line\ to\ the\ file.\n\n@param\ nextLine\na\ string\ array\ with\ each\ comma-separated\ element\ as\ a\ separate\nentry.\n\n
numComments=16

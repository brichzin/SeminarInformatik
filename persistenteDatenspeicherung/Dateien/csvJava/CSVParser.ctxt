#BlueJ class context
comment0.target=CSVParser()
comment0.text=\nConstructs\ CSVParser\ using\ a\ comma\ for\ the\ separator.\n\n
comment1.params=separator
comment1.target=CSVParser(char)
comment1.text=\nConstructs\ CSVParser\ with\ supplied\ separator.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries.\n\n
comment10.params=nextLine\ inQuotes\ i
comment10.target=boolean\ isNextCharacterEscapedQuote(String,\ boolean,\ int)
comment10.text=\nprecondition\:\ the\ current\ character\ is\ a\ quote\ or\ an\ escape\n@param\ nextLine\ the\ current\ line\n@param\ inQuotes\ true\ if\ the\ current\ context\ is\ quoted\n@param\ i\ current\ index\ in\ line\n@return\ true\ if\ the\ following\ character\ is\ a\ quote\n\n
comment11.params=nextLine\ inQuotes\ i
comment11.target=boolean\ isNextCharacterEscapable(String,\ boolean,\ int)
comment11.text=\nprecondition\:\ the\ current\ character\ is\ an\ escape\n@param\ nextLine\ the\ current\ line\n@param\ inQuotes\ true\ if\ the\ current\ context\ is\ quoted\n@param\ i\ current\ index\ in\ line\n@return\ true\ if\ the\ following\ character\ is\ a\ quote\n\n
comment12.params=sb
comment12.target=boolean\ isAllWhiteSpace(CharSequence)
comment12.text=\nprecondition\:\ sb.length()\ >\ 0\n@param\ sb\ A\ sequence\ of\ characters\ to\ examine\n@return\ true\ if\ every\ character\ in\ the\ sequence\ is\ whitespace\n\n
comment2.params=separator\ quotechar
comment2.target=CSVParser(char,\ char)
comment2.text=\nConstructs\ CSVParser\ with\ supplied\ separator\ and\ quote\ char.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n\n
comment3.params=separator\ quotechar\ escape
comment3.target=CSVParser(char,\ char,\ char)
comment3.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n\n
comment4.params=separator\ quotechar\ escape\ strictQuotes
comment4.target=CSVParser(char,\ char,\ char,\ boolean)
comment4.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\nAllows\ setting\ the\ "strict\ quotes"\ flag\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n@param\ strictQuotes\nif\ true,\ characters\ outside\ the\ quotes\ are\ ignored\n\n
comment5.params=separator\ quotechar\ escape\ strictQuotes\ ignoreLeadingWhiteSpace
comment5.target=CSVParser(char,\ char,\ char,\ boolean,\ boolean)
comment5.text=\nConstructs\ CSVReader\ with\ supplied\ separator\ and\ quote\ char.\nAllows\ setting\ the\ "strict\ quotes"\ and\ "ignore\ leading\ whitespace"\ flags\n@param\ separator\nthe\ delimiter\ to\ use\ for\ separating\ entries\n@param\ quotechar\nthe\ character\ to\ use\ for\ quoted\ elements\n@param\ escape\nthe\ character\ to\ use\ for\ escaping\ a\ separator\ or\ quote\n@param\ strictQuotes\nif\ true,\ characters\ outside\ the\ quotes\ are\ ignored\n@param\ ignoreLeadingWhiteSpace\nif\ true,\ white\ space\ in\ front\ of\ a\ quote\ in\ a\ field\ is\ ignored\n\n
comment6.target=boolean\ isPending()
comment6.text=\n\n@return\ true\ if\ something\ was\ left\ over\ from\ last\ call(s)\n\n
comment7.params=nextLine
comment7.target=String[]\ parseLineMulti(String)
comment8.params=nextLine
comment8.target=String[]\ parseLine(String)
comment9.params=nextLine\ multi
comment9.target=String[]\ parseLine(String,\ boolean)
comment9.text=\nParses\ an\ incoming\ String\ and\ returns\ an\ array\ of\ elements.\n\n@param\ nextLine\nthe\ string\ to\ parse\n@param\ multi\n@return\ the\ comma-tokenized\ list\ of\ elements,\ or\ null\ if\ nextLine\ is\ null\n@throws\ IOException\ if\ bad\ things\ happen\ during\ the\ read\n\n
numComments=13
